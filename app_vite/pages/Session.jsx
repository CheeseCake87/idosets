import { createEffect, createSignal, For, onMount, Show, useContext } from 'solid-js'
import { useNavigate, useParams } from '@solidjs/router'
import { mainContext } from '../context/mainContext'
import { Loading, LoadingSmall } from '../components/Loading'
import Fetcher from '../utilities/fetcher'

export default function Session () {
  const [ctx, _, connection] = useContext(mainContext)
  const navigate = useNavigate()
  const params = useParams()

  const workout_id = params.workout_id
  const workout_session_id = params.workout_session_id

  const [finishSet, setFinishSet] = createSignal(null)
  const [undoSet, setUndoSet] = createSignal(null)

  const [finishing, setFinishing] = createSignal(false)
  const [finished, setFinished] = createSignal(false)
  const [cancelling, setCancelling] = createSignal(false)
  const [cancelSession, setCancelSession] = createSignal(false)
  const [finishSession, setFinishSession] = createSignal(false)

  const [showDurationInput, setShowDurationInput] = createSignal(true)
  const [showRepsInput, setShowRepsInput] = createSignal(true)
  const [showWeightInput, setShowWeightInput] = createSignal(false)

  const [exercises, setExercises] = createSignal([])

  const [logCollection, setLogCollection] = createSignal([])

  // workout_session_id is generated by the start workout button on the Workouts page
  const workout_session = new Fetcher({
    workout_id, workout_session_id
  }, ctx.getSession)

  createEffect(() => {
    if (workout_session.data.loading === false) {
      setExercises(workout_session.get('exercises').items)
      setFinished(workout_session.get('workout_session').is_finished)
    }
  })

  onMount(() => {
    setTimeout(() => {
      window.scrollTo({ top: 130, behavior: 'smooth' })
    }, 200)
  })

  function reset_view () {
    setShowRepsInput(true)
    setShowWeightInput(false)
    setShowDurationInput(false)
    setFinishSet(null)
  }

  function SetDisplay (props) {
    const { exercise_id, set, set_i, set_log } = props

    return (
            <div className={'flex-reactive justify-between'} id={`${exercise_id}_set_${set_i()}`}>

                <div className={'flex gap-4 items-center'}>
                    <h1 className={'m-0 opacity-50'}>{set_i() + 1}</h1>
                    <Show when={set.is_duration}>
                        <div className={'flex items-center gap-1'}>
                            <span className="material-icons px-2">timer</span>
                            <h3 className={'m-0'}>
                                {set.duration_min > 0 ? ctx.fancyTimeFormat(set.duration_min) : ''}
                                {(set.duration_max > 0 && set.duration_min > 0) ? ' - ' : ''}
                                {set.duration_max > 0 ? ctx.fancyTimeFormat(set.duration_max) : ''}
                            </h3>
                        </div>
                    </Show>
                    <Show when={set.is_reps}>
                        <div className={'flex items-center gap-1'}>
                            <span className="material-icons px-2">fitness_center</span>
                            <h3 className={'m-0'}>
                                {ctx.fancyRepFormat(set.reps_min, set.reps_max)}
                            </h3>
                        </div>
                    </Show>
                </div>

                {/* disable done button if set_log is not empty, done is enabled in fallback */}
                <Show
                    when={Object.keys(set_log()).length > 0}
                    fallback={
                        <div className={'flex justify-between gap-2'}>
                            <div className={'opacity-50 action-options items-center justify-end gap-2'}>
                                <div className={'action'}>
                                    <span className="material-icons">undo</span>
                                </div>
                            </div>
                            <div className={'action-options items-center justify-end gap-2'}>
                                <div className={'action'} onClick={() => {
                                  setFinishSet(`${exercise_id}_set_${set_i()}`)
                                }}>
                                    <span className="material-icons">done</span>
                                </div>
                            </div>
                        </div>
                    }
                >
                    <div className={'flex justify-between gap-2'}>
                        <div className={'action-options items-center justify-end gap-2'}>
                            <div className={'action'} onClick={() => {
                              setUndoSet(`${exercise_id}_set_${set_i()}`)
                            }}>
                                <span className="material-icons">undo</span>
                            </div>
                        </div>
                        <div className={'action-options items-center justify-end gap-2 opacity-50'}>
                            <div className={'action'}>
                                <span className="material-icons">done</span>
                            </div>
                        </div>
                    </div>
                </Show>

            </div>
    )
  }

  function UndoSet (props) {
    const { _, setLog } = props

    return (
            <div className={'display-box flex-reactive items-center justify-between mt-4'}>
                <p>Are you sure you want to undo this log?</p>
                <div className={'flex gap-2'}>
                    <button className={'button-bad'} onClick={() => {
                      setLog({})
                      setUndoSet(null)
                    }}>
                        Yes
                    </button>
                    <button onClick={() => {
                      setUndoSet(null)
                    }}>
                        No
                    </button>
                </div>
            </div>
    )
  }

  function FinishSetSections (props) {
    // Provides the section buttons to switch between (duration / reps) and weight

    const { set } = props

    return (
            <div className={'flex flex-row gap-4 mt-4'}>

                <Show when={set.is_duration}>

                    <div className={
                        showDurationInput()
                          ? 'action-box flex-1'
                          : 'action-box-clickable flex-1'
                    }
                         onClick={() => {
                           setShowWeightInput(false)
                           setShowRepsInput(false)
                           setShowDurationInput(true)
                         }}>
                        Duration
                    </div>

                </Show>

                <Show when={set.is_reps}>

                    <div className={
                        showRepsInput()
                          ? 'action-box flex-1'
                          : 'action-box-clickable flex-1'
                    }
                         onClick={() => {
                           setShowWeightInput(false)
                           setShowRepsInput(true)
                           setShowDurationInput(false)
                         }}>
                        Reps
                    </div>

                </Show>

                <div className={
                    showWeightInput()
                      ? 'action-box flex-1'
                      : 'action-box-clickable flex-1'
                }
                     onClick={() => {
                       setShowWeightInput(true)
                       setShowRepsInput(false)
                       setShowDurationInput(false)
                     }}>
                    Weight
                </div>

            </div>
    )
  }

  function FinishSetDuration (props) {
    // Used to provide the interface to input duration done

    const { duration, setDuration } = props
    const [durationDisplay, setDurationDisplay] = createSignal(ctx.fancyTimeFormat(duration()))

    createEffect(() => {
      if (duration() < 0) {
        setDuration(0)
      } else {
        setDurationDisplay(
          ctx.fancyTimeFormat(duration())
        )
      }
    })

    return (
            <div className={'display-box flex-col gap-4 mt-2'}>
                <div className={'text-center p-4'}>
                    <h1>{durationDisplay()}</h1>
                </div>
                <div className={'flex-reactive'}>
                    <div
                        className={'action-box-clickable flex-1 items-center'}
                        onClick={() => {
                          setDuration(0)
                        }}>
                        Reset
                    </div>
                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               if (duration() < 0) {
                                 setDuration(0)
                               } else {
                                 setDuration(duration() - 5)
                               }
                             }}>
                            -5 secs
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setDuration(duration() + 5)
                             }}>
                            +5 secs
                        </div>

                    </div>
                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               if (duration() < 0) {
                                 setDuration(0)
                               } else {
                                 setDuration(duration() - 30)
                               }
                             }}>
                            -30 secs
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setDuration(duration() + 30)
                             }}>
                            +30 secs
                        </div>
                    </div>
                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               if (duration() < 0) {
                                 setDuration(0)
                               } else {
                                 setDuration(duration() - 60)
                               }
                             }}>
                            -1 mins
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setDuration(duration() + 60)
                             }}>
                            +1 mins
                        </div>

                    </div>
                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               if (duration() < 0) {
                                 setDuration(0)
                               } else {
                                 setDuration(duration() - 600)
                               }
                             }}>
                            -10 mins
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setDuration(duration() + 600)
                             }}>
                            +10 mins
                        </div>

                    </div>
                </div>
            </div>
    )
  }

  function FinishSetWeight (props) {
    // Used to provide the interface to input weight done

    const { exercise_id, set_id, weight, setWeight, manualInput, setManualInput } = props

    return (
            <div className={'display-box flex-col gap-4 mt-2'}>
                <div className={'flex-reactive justify-center'}>

                    <Show when={manualInput()}
                          fallback={
                              <div className={'action-box-clickable flex-1'}
                                   onClick={() => {
                                     setManualInput(true)
                                     document.getElementById(
                                       exercise_id +
                                         '_set_weight_' +
                                         set_id
                                     ).focus()
                                   }}>
                                  <h1 className={'m-0'}>{
                                      weight() === 1
                                        ? weight() + ' kg'
                                        : weight() + ' kgs'
                                  }</h1>
                              </div>
                          }>
                        <form className={'form-col'}
                              onSubmit={(e) => {
                                e.preventDefault()
                              }}>
                            <input
                                className={'flex-1'}
                                type="number"
                                step=".01"
                                id={
                                 exercise_id +
                                 '_set_weight_' +
                                 set_id
                                }
                                name="set_weight"
                                placeholder={'0'}
                                value={weight() === 0 ? '' : weight()}
                                onKeyUp={(e) => {
                                  setWeight(parseFloat(e.target.value))
                                }}
                            />
                            <button
                                className={'button-good flex-1'}
                                type="button"
                                onClick={() => {
                                  setManualInput(false)
                                }}>
                                Done
                            </button>
                        </form>
                    </Show>

                </div>
                <div className={'flex-reactive'}>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() - 0.25)
                               if (weight() < 0) {
                                 setWeight(0)
                               }
                             }}>
                            -&nbsp;<small className={'pt-0.5'}>0.25</small>&nbsp;kg
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() + 0.25)
                             }}>
                            +&nbsp;<small className={'pt-0.5'}>0.25</small>&nbsp;kg
                        </div>
                    </div>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() - 1)
                               if (weight() < 0) {
                                 setWeight(0)
                               }
                             }}>
                            -1 kg
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() + 1)
                             }}>
                            +1 kg
                        </div>
                    </div>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() - 5)
                               if (weight() < 0) {
                                 setWeight(0)
                               }
                             }}>
                            -5 kgs
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() + 5)
                             }}>
                            +5 kgs
                        </div>
                    </div>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() - 10)
                               if (weight() < 0) {
                                 setWeight(0)
                               }
                             }}>
                            -10 kgs
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setWeight(weight() + 10)
                             }}>
                            +10 kgs
                        </div>
                    </div>

                </div>
                <div className={'flex-reverse-reactive gap-2'}>
                    <div
                        className={'action-box-clickable flex-1 items-center'}
                        onClick={() => {
                          setWeight(0.0)
                        }}>
                        Reset
                    </div>
                    <div
                        className={'action-box-clickable flex-1 items-center'}
                        onClick={() => {
                          setWeight(weight() * 2)
                        }}>
                        Double
                    </div>
                </div>
            </div>
    )
  }

  function FinishSetReps (props) {
    // Used to provide the interface to input reps done

    const { exercise_id, set_id, reps, setReps, manualInput, setManualInput } = props

    return (
            <div className={'display-box flex-col gap-4 mt-2'}>

                <div className={'flex-reactive justify-center'}>

                    <Show when={manualInput()}
                          fallback={
                              <div className={'action-box-clickable flex-1'}
                                   onClick={() => {
                                     setManualInput(true)
                                     document.getElementById(
                                       exercise_id +
                                         '_set_reps_' +
                                         set_id
                                     ).focus()
                                   }}>
                                  <h1 className={'m-0'}>{
                                      reps() === 1
                                        ? reps() + ' rep'
                                        : reps() + ' reps'
                                  }</h1>
                              </div>
                          }>
                        <form className={'form-col'}
                              onSubmit={(e) =>
                                e.preventDefault()
                              }>
                            <input
                                className={'flex-1'}
                                type="number"
                                step=".01"
                                id={
                                 exercise_id +
                                 '_set_reps_' +
                                 set_id
                                }
                                name="set_reps"
                                placeholder={'0'}
                                value={reps() === 0 ? '' : reps()}
                                onKeyUp={(e) =>
                                  setReps(parseInt(e.target.value))
                                }
                            />
                            <button
                                className={'button-good flex-1'}
                                type="button"
                                onClick={() => {
                                  setManualInput(false)
                                }}>
                                Done
                            </button>
                        </form>
                    </Show>

                </div>

                <div className={'flex-reactive'}>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() - 1)
                               if (reps() < 0) {
                                 setReps(0)
                               }
                             }}>
                            -1
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() + 1)
                             }}>
                            +1
                        </div>
                    </div>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() - 5)
                               if (reps() < 0) {
                                 setReps(0)
                               }
                             }}>
                            -5
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() + 5)
                             }}>
                            +5
                        </div>
                    </div>

                    <div className={'flex-reactive-reverse flex-1 gap-1'}>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() - 10)
                               if (reps() < 0) {
                                 setReps(0)
                               }
                             }}>
                            -10
                        </div>
                        <div className={'action-box-clickable flex-1'}
                             onClick={() => {
                               setReps(reps() + 10)
                             }}>
                            +10
                        </div>
                    </div>

                </div>
                <div className={'flex-reverse-reactive gap-2'}>
                    <div
                        className={'action-box-clickable flex-1 items-center'}
                        onClick={() => {
                          setReps(0)
                        }}>
                        Reset
                    </div>
                </div>

            </div>
    )
  }

  function SetLog (props) {
    const set_log = props.set_log

    return (
            <div className={'set_log_display'}>

                <Show when={set_log().reps > 0}>
                    <div className={'display-box p-4 flex-1 justify-center'}>
                        <h4 className={'m-0 opacity-90'}>{set_log().reps} reps</h4>
                    </div>
                </Show>
                <Show when={set_log().duration > 0}>
                    <div className={'display-box p-4 flex-1 justify-center'}>
                        <h4 className={'m-0 opacity-90'}>{ctx.fancyTimeFormat(set_log().duration)}</h4>
                    </div>
                </Show>
                <Show when={set_log().weight > 0}>
                    <div className={'display-box p-4 flex-1 justify-center'}>
                        <h4 className={'m-0 opacity-90'}>{set_log().weight} kgs</h4>
                    </div>
                </Show>

            </div>
    )
  }

  function SetRow (props) {
    const { exercise_id, set, set_i } = props

    const [repsManualInput, setRepsManualInput] = createSignal(false)
    const [weightManualInput, setWeightManualInput] = createSignal(false)

    const [weight, setWeight] = createSignal(0.0)
    const [reps, setReps] = createSignal(0)
    const [duration, setDuration] = createSignal(0)

    const [log, setLog] = createSignal({})
    // log collection index
    const [lci, setLci] = createSignal(0)

    // set log from refresh
    if (Object.keys(set.set_log).length > 0) {
      // build the log data
      const log_data = { ...set.set_log, lci: logCollection().length - 1 }
      // store log from api call
      setLog(log_data)
      // build the log list during render
      setLogCollection([...logCollection(), log_data])
      // get the last log index value (this logs location)
      setLci(log_data.lci)
    }

    return (
            <div className={'display-box flex-col'}>

                <SetDisplay exercise_id={exercise_id} set={set} set_i={set_i} set_log={log}/>

                <Show when={undoSet() === `${exercise_id}_set_${set_i()}`}>
                    <UndoSet log={log} setLog={setLog}/>
                </Show>

                <Show when={Object.keys(log()).length > 0}>
                    <SetLog set_log={log}/>
                </Show>

                <Show when={finishSet() === `${exercise_id}_set_${set_i()}`}>

                    <FinishSetSections set={set} set_i={set_i}/>

                    <Show when={undoSet() === `${exercise_id}_set_${set_i()}`}>
                        <UndoSet set_log_id={log.set_log_id}/>
                    </Show>

                    <Show when={set.is_duration}>
                        <Show when={showDurationInput()}>
                            <FinishSetDuration
                                duration={duration}
                                setDuration={setDuration}
                            />
                        </Show>
                    </Show>

                    <Show when={set.is_reps}>
                        <Show when={showRepsInput()}>
                            <FinishSetReps
                                exercise_id={exercise_id}
                                set_id={set.set_id}
                                reps={reps}
                                setReps={setReps}
                                manualInput={repsManualInput}
                                setManualInput={setRepsManualInput}
                            />
                        </Show>
                    </Show>

                    <Show when={showWeightInput()}>
                        <Show when={ctx.units === 'kgs'}>
                            <FinishSetWeight
                                exercise_id={exercise_id}
                                set_id={set.set_id}
                                weight={weight}
                                setWeight={setWeight}
                                manualInput={weightManualInput}
                                setManualInput={setWeightManualInput}
                            />
                        </Show>
                    </Show>

                    {/* Save the set log */}
                    <div className={'flex justify-between gap-4 pt-2'}>

                        <button
                            className={'button-bad flex-1'}
                            type="button"
                            onClick={() => {
                              reset_view()
                              setRepsManualInput(false)
                              setWeightManualInput(false)
                            }}>
                            Cancel
                        </button>

                        <button
                            className={'button-good flex-1'}
                            type="button"
                            onClick={() => {
                              const log_data = {
                                account_id: ctx.account_id,
                                workout_id,
                                workout_session_id,
                                exercise_id,
                                set_id: set.set_id,
                                weight: weight(),
                                reps: reps(),
                                duration: duration(),
                                lci: logCollection().length + 1
                              }
                              setLogCollection([...logCollection(), log_data])
                              setLog(log_data)
                              reset_view()
                              setRepsManualInput(false)
                              setWeightManualInput(false)
                              const scrollDiv = document.getElementById(
                                    `${exercise_id}_set_${set_i()}`).offsetTop
                              window.scrollTo({ top: scrollDiv - 30, behavior: 'smooth' })
                            }}>
                            Add
                        </button>

                    </div>

                </Show>

            </div>
    )
  }

  function Page () {
    return (<div className={'container'}>
            {/* Show when not finished */}
            <Show
                when={!finished()}
                fallback={
                    <>
                        <div className={'action-options gap-5 pb-4'}>
                            <div className={'action'} onClick={() => {
                              navigate('/workouts')
                            }}>
                                <span className="material-icons">arrow_back</span>
                            </div>

                            <div className={'action-options-text'}>
                                <h1 className={'m-0'}>
                                    {workout_session.get('workout').name}
                                </h1>
                            </div>
                        </div>

                        <div className={'display-box no-bg flex-col gap-4'}>

                            <h4 className={'m-0'}>
                                Time:&nbsp;
                                <span className={'opacity-80'}>
                                {ctx.fancyTimeFormat(workout_session.get('workout_session').duration)}
                            </span>
                            </h4>

                            <Show when={workout_session.get('workout_session').total_weight > 0}>
                                <h4 className={'m-0'}>
                                    Total Weight:&nbsp;
                                    <span className={'opacity-80'}>
                                {workout_session.get('workout_session').total_weight} {ctx.units}
                                </span>
                                </h4>
                            </Show>

                        </div>
                    </>
                }
            >

                {/* Cancel workout */}
                <div
                    className={'display-box-slim flex-col no-bg gap-2 mb-20 border-0'} id={'cancel-workout'}>
                    <Show when={cancelSession()}
                          children={
                              <div
                                  className={connection() ? 'display-box flex-col text-center gap-6' : 'display-box flex-col text-center gap-6'}>

                                  <Show when={!connection()}
                                        fallback={
                                            <p className={'opacity-90'}>
                                                Are you sure you want to cancel this workout?
                                            </p>
                                        }>
                                      <div>
                                          <p className={'m-0'}>Oh no! It looks like you might be offline.</p>
                                          <p>Don't refresh this page, and try again when you're back online.</p>
                                      </div>
                                  </Show>

                                  <div className={'flex gap-2'}>
                                      <Show
                                          when={connection()}
                                          fallback={
                                              <button className={'button-good flex-1'}
                                                      onClick={() => {
                                                        setCancelling(true)
                                                        ctx.cancelSession({
                                                          workout_id,
                                                          workout_session_id
                                                        }).then((_) => {
                                                          navigate('/workouts')
                                                        }).catch(
                                                          (_) => {
                                                            setCancelling(false)
                                                          }
                                                        )
                                                      }}>
                                                  {cancelling() ? <LoadingSmall/> : 'Try Again'}
                                              </button>
                                          }
                                      >
                                          <button className={'button-bad flex-1'}
                                                  onClick={() => {
                                                    setCancelling(true)
                                                    ctx.cancelSession({
                                                      workout_id,
                                                      workout_session_id
                                                    }).then((_) => {
                                                      navigate('/workouts')
                                                    }).catch(
                                                      (_) => {
                                                        setCancelling(false)
                                                      }
                                                    )
                                                  }}>
                                              {cancelling() ? <LoadingSmall/> : 'Cancel Workout'}
                                          </button>
                                      </Show>
                                      <Show when={connection()}>
                                          <button className={'flex-1'}
                                                  onClick={() => {
                                                    setCancelSession(false)
                                                  }}>
                                              No
                                          </button>
                                      </Show>
                                  </div>
                              </div>
                          }
                          fallback={
                              <button
                                  className={'button-bad button-large flex-1'}
                                  type="button"
                                  onClick={() => {
                                    setCancelSession(true)
                                    const scrollDiv = document.getElementById(
                                      'cancel-workout').offsetTop
                                    window.scrollTo({ top: scrollDiv - 30, behavior: 'smooth' })
                                  }}>
                                  Cancel Workout
                              </button>
                          }/>

                </div>

                {/* Workout name */}
                <div className={'action-options gap-5 pb-4'} id={'workout-name'}>
                    <div className={'action-options-text'}>
                        <h1 className={'m-0'}>
                            {workout_session.get('workout').name}
                        </h1>
                    </div>
                </div>

                {/* Loop through each exercise in the workout session */}
                <div className={'pb-4 flex flex-col gap-4'}>

                    <For each={exercises()}>
                        {
                            (exercise, exercise_i) =>
                                <div className={'display-box-thin flex-col gap-3'}>
                                    <div className={'flex flex-col gap-4 p-4'}>
                                        <h2 className={'m-0'}>{exercise.name}</h2>
                                        <Show when={
                                            exercise.info_url !== null &&
                                            exercise.info_url !== '' &&
                                            exercise.info_url !== undefined
                                        }>
                                            <a href={exercise.info_url}
                                               target={'_blank'}
                                               referrerPolicy={'no-referrer'}
                                               className={'flex items-center gap-2 opacity-80 hover:opacity-100'}>
                                                <img src={exercise.info_url_favicon}
                                                     className={'w-8 h-8 rounded-full inline-block border bg-black'}
                                                     alt={'🚫ico'}/>
                                                <span className={'underline'}>Instructions</span>
                                                <span className={'material-icons w-5 h-5'}>open_in_new</span>
                                            </a>
                                        </Show>
                                    </div>
                                    {/* Loop through sets */}
                                    <For each={exercise.sets}>
                                        {
                                            (set, set_i) =>
                                                <SetRow
                                                    exercise_id={exercise.exercise_id}
                                                    set={set}
                                                    set_i={set_i}
                                                />
                                        }
                                    </For>

                                </div>
                        }
                    </For>

                </div>

                {/* Finish workout */}
                <div
                    className={'display-box-slim flex-col gap-2 my-12 border-0'} id={'finish-workout'}>
                    <Show when={finishSession()}
                          children={
                              <div
                                  className={connection() ? 'display-box no-bg flex-col text-center gap-6' : 'display-box flex-col text-center gap-6'}>

                                  <Show when={!connection()}
                                        fallback={
                                            <p className={'opacity-90'}>
                                                Are you sure you want to finish this workout?
                                            </p>
                                        }>
                                      <div>
                                          <p className={'m-0'}>Oh no! It looks like you might be offline.</p>
                                          <p>Don't refresh this page, and try again when you're back online.</p>
                                      </div>
                                  </Show>

                                  <div className={'flex gap-2'}>
                                      <Show
                                          when={connection()}
                                          fallback={
                                              <button className={'button-good flex-1'}
                                                      onClick={() => {
                                                        setFinishing(true)
                                                        ctx.stopSession({
                                                          workout_id,
                                                          workout_session_id,
                                                          data: {
                                                            log_collection: logCollection()
                                                          }
                                                        }).then((_) => {
                                                          workout_session.refetch()
                                                          setFinishing(false)
                                                        }).catch(
                                                          (_) => {
                                                            setFinishing(false)
                                                          }
                                                        )
                                                      }}>
                                                  {finishing() ? <LoadingSmall/> : 'Try Again'}
                                              </button>
                                          }
                                      >
                                          <button className={'button-good flex-1'}
                                                  onClick={() => {
                                                    setFinishing(true)
                                                    ctx.stopSession({
                                                      workout_id,
                                                      workout_session_id,
                                                      data: {
                                                        log_collection: logCollection()
                                                      }
                                                    }).then((_) => {
                                                      workout_session.refetch()
                                                      setFinishing(false)
                                                    }).catch(
                                                      (_) => {
                                                        setFinishing(false)
                                                      }
                                                    )
                                                  }}>
                                              {finishing() ? <LoadingSmall/> : 'Finish Workout'}
                                          </button>
                                      </Show>
                                      <Show when={connection()}>
                                          <button className={'flex-1'}
                                                  onClick={() => {
                                                    setFinishSession(false)
                                                  }}>
                                              No
                                          </button>
                                      </Show>
                                  </div>
                              </div>
                          }
                          fallback={
                              <button
                                  className={'button-good button-large flex-1'}
                                  type="button"
                                  onClick={() => {
                                    setFinishSession(true)
                                    const scrollDiv = document.getElementById(
                                      'finish-workout').offsetTop
                                    window.scrollTo({ top: scrollDiv - 30, behavior: 'smooth' })
                                  }}>
                                  Finish Workout
                              </button>
                          }/>

                </div>
            </Show>
        </div>)
  }

  return (<>
        {/* <TopMenu/> */}
        {
            workout_session.data.loading
              ? <div className={'pt-10'}><Loading/></div>
              : <Page/>
        }
    </>)
};
